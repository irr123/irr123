<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Public notes</title>
    <link>https://bogomolov.work/blog/</link>
    <description>Recent content on Public notes</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Feb 2025 20:12:31 +0000</lastBuildDate>
    <atom:link href="https://bogomolov.work/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>(Almost) Free Google Drive Backup</title>
      <link>https://bogomolov.work/blog/posts/google-drive-backup/</link>
      <pubDate>Thu, 27 Feb 2025 20:12:31 +0000</pubDate>
      <guid>https://bogomolov.work/blog/posts/google-drive-backup/</guid>
      <description>&lt;p&gt;Have you &lt;em&gt;truly&lt;/em&gt; considered the catastrophic risks of losing all your&#xA;&lt;a href=&#34;https://drive.google.com/&#34;&gt;Google Drive&lt;/a&gt; data?&#xA;Can your business afford such a loss?&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;suit.jpg&#34; alt=&#34;generate image in anime style where white collar in suit grabs his head because he realized that lost his reports &#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Let me guide you in mitigating those risks. I asked myself the same question&#xA;and searched for a reliable, out-of-the-box solution. Disappointed with&#xA;Google&amp;rsquo;s suggestions, I decided to build my own. Think of it as playing with&#xA;Lego-assembling the necessary components.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DI Container vs. Service Template (generator)</title>
      <link>https://bogomolov.work/blog/posts/golang-di-container-vs-service-template/</link>
      <pubDate>Fri, 21 Feb 2025 06:31:02 +0000</pubDate>
      <guid>https://bogomolov.work/blog/posts/golang-di-container-vs-service-template/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s talk about building and evolving &lt;a href=&#34;https://go.dev/&#34;&gt;Golang&lt;/a&gt; services in&#xA;the enterprise. We&amp;rsquo;ll explore two approaches:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;morpheus.jpg&#34; alt=&#34;Create image illustration in anime style with Morpheus from Matrix suggesting you blue and red pills&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A &lt;em&gt;Service Template (generator)&lt;/em&gt; is a common approach for unifying and&#xA;quickly bootstrapping new microservices.  Its popularity is evident in the&#xA;community, as demonstrated by examples such as:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/evrone/go-clean-template&#34;&gt;https://github.com/evrone/go-clean-template&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/golang/comments/1h124ee/rate_my_go_project_template/&#34;&gt;https://www.reddit.com/r/golang/comments/1h124ee/rate_my_go_project_template/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dev.to/protium/github-template-for-golang-services-3o27&#34;&gt;https://dev.to/protium/github-template-for-golang-services-3o27&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=1ZbQS6pOlSQ&#34;&gt;https://www.youtube.com/watch?v=1ZbQS6pOlSQ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_injection&#34;&gt;Dependency injection&lt;/a&gt;&#xA;(&lt;em&gt;DI&lt;/em&gt;)&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; is an approach where objects are constructed by passing&#xA;pre-initialized components to them, rather than having the objects initialize&#xA;those components themselves.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/irr123/di&#34;&gt;DI container&lt;/a&gt; automates the dependency&#xA;injection process. While not the most common approach for bootstrapping new&#xA;services, it offers several advantages, which I will outline.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;the-problem&#34;&gt;The problem&lt;/h2&gt;&#xA;&lt;p&gt;The challenge is a timeless one: accelerating the delivery of value to&#xA;production. From a technical perspective, this translates to several key&#xA;requirements:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python3 Dockerfile with uv</title>
      <link>https://bogomolov.work/blog/posts/docker-uv/</link>
      <pubDate>Tue, 18 Feb 2025 12:39:42 +0000</pubDate>
      <guid>https://bogomolov.work/blog/posts/docker-uv/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been noticed that my simple&#xA;&lt;a href=&#34;https://hub.docker.com/repository/docker/c1rno/python&#34;&gt;python3 docker image&lt;/a&gt;&#xA;with uv has unexpected amount of downloads, so, I descided to steal some&#xA;traffic from original &lt;a href=&#34;https://docs.astral.sh/uv/guides/integration/docker/&#34;&gt;https://docs.astral.sh/uv/guides/integration/docker/&lt;/a&gt;&#xA;to it page.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-it-uv&#34;&gt;What is it &lt;a href=&#34;https://github.com/astral-sh/uv&#34;&gt;uv&lt;/a&gt;?&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;posts-docker-uv-1.jpg&#34; alt=&#34;Create image illustration in anime style included python3&amp;rsquo;s snake, rust and uv (it&amp;rsquo;s new package manager for python written in rust)&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Long story short -  it&amp;rsquo;s fast-&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;rust&lt;/a&gt;&#xA;python&amp;rsquo;s &lt;a href=&#34;https://pip.pypa.io/en/stable/&#34;&gt;pip&lt;/a&gt; alternative. And &lt;code&gt;python3 -m venv ./venv&lt;/code&gt; too and maybe more at time when you&amp;rsquo;re reading it.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
